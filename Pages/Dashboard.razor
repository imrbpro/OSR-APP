@page "/"
@using OSR_APP.Services.Interface
@inject NavigationManager navigation
@inject ISnackbar Snackbar
@inject IFilterService filterService
<PageTitle>Dashboard</PageTitle>
<style>
    .filter-wrapper {
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        align-content: center;
        align-items: stretch;
        justify-content: space-evenly;
    }
</style>
<div class="align-content-sm-around p-4 ">
    <h3>Reporting Filters</h3>
    <hr />
    <div class="filter-wrapper">
        <div class="row">
            <MudSelect T="NavigationPages" Label="Report" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="SelectedValue">
                <MudSelectItem Value="@(new NavigationPages("ready"))" />
                <MudSelectItem Value="@(new NavigationPages("discounting"))" />
                <MudSelectItem Value="@(new NavigationPages("forward"))" />
                <MudSelectItem Value="@(new NavigationPages("Setoff"))" />
                <MudSelectItem Value="@(new NavigationPages("Closeout"))" />
                <MudSelectItem Value="@(new NavigationPages("outstandingfwd"))" />
            </MudSelect>
        </div>
        <br />
        <div class="row">
            <div class="col-md-2">Deal Number</div>
            <div class="col-md-4">
                <input class="form-control" @bind="dealNumber" />
            </div>
            <div class="col-md-2">To</div>
            <div class="col-md-4">
                <input class="form-control" @bind="dealNumberTo" />
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-2">Entry Date From</div>
            <div class="col-md-4">
                <InputDate @bind-Value="entryDateFrom" />
            </div>
            <div class="col-md-2">To</div>
            <div class="col-md-4">
                <InputDate @bind-Value="entryDateTo" />
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-2">Contact Date From</div>
            <div class="col-md-4">
                <InputDate @bind-Value="contactDateFrom" />
            </div>
            <div class="col-md-2">To</div>
            <div class="col-md-4">
                <InputDate @bind-Value="contactDateTo" />
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-2">Value Date From</div>
            <div class="col-md-4">
                <InputDate @bind-Value="valueDateFrom" />
            </div>
            <div class="col-md-2">To</div>
            <div class="col-md-4">
                <InputDate @bind-Value="valueDateTo" />
            </div>
        </div>

        <hr />
        <div class="row">
            <div class="col-md-2">Group By</div>
            <div class="col-md-10">
                <div class="form-check">
                    <InputRadioGroup @bind-Value="groupBy">
                        Portfolio <InputRadio Value="portfolio">
                            <label class="form-check-label">Portfolio</label>
                        </InputRadio>
                        <br />
                        Currency  <InputRadio Value="currency">
                            <label class="form-check-label">Currency</label>
                        </InputRadio>
                        <br />
                        DealNumber  <InputRadio Value="dealNumber">
                            <label class="form-check-label">DealNumber</label>
                        </InputRadio>
                    </InputRadioGroup>
                </div>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-6">
                <MudSelect class="form-control" T="string" Placeholder="Branch Code">
                    @if (branchCodeData != null)
                    {
                        foreach (var brcode in branchCodeData)
                        {
                            <MudSelectItem T="string" Value="@brcode">@brcode</MudSelectItem>
                        }
                    }
                </MudSelect>
            </div>
            <div class="col-md-6">
                <MudSelect class="form-control" T="string" Placeholder="Currency">
                    @if (currencyData != null)
                    {
                        foreach (var currency in currencyData)
                        {
                            <MudSelectItem T="string" Value="@currency">@currency</MudSelectItem>
                        }
                    }
                </MudSelect>
            </div>
        </div>

        <br />
        <div class="row">
            <div class="col-md-6">
                <MudSelect class="form-control" T="string" Placeholder="Portfolio">
                    @if (portfolioData != null)
                    {
                        foreach (var portfolio in portfolioData)
                        {
                            <MudSelectItem T="string" Value="@portfolio">@portfolio</MudSelectItem>
                        }
                    }
                </MudSelect>
            </div>
            <div class="col-md-6">
                <MudSelect class="form-control" T="string" Placeholder="Trader">
                    @if(traderData != null)
                    {
                        foreach (var trader in traderData)
                        {
                            <MudSelectItem T="string" Value="@trader">@trader</MudSelectItem>
                        }
                    }
                    
                </MudSelect>
            </div>
        </div>

        <br />
        <div class="row">
            <div class="col-md-6">
                <select class="form-control" @bind="customer">
                    <option value="">Select Customer</option>
                </select>
            </div>
            <div class="col-md-6">
                <select class="form-control" @bind="ps">
                    <option value="">Purchase</option>
                    <option value="">Sale</option>
                </select>
            </div>
        </div>

        <br />
        <button class="cssbuttons-io-button" @onclick="GenerateReport">
            Get Report
            <div class="icon">
                <svg height="24"
                     width="24"
                     viewBox="0 0 24 24"
                     xmlns="http://www.w3.org/2000/svg">
                    <path d="M0 0h24v24H0z" fill="none"></path>
                    <path d="M16.172 11l-5.364-5.364 1.414-1.414L20 12l-7.778 7.778-1.414-1.414L16.172 13H4v-2z"
                          fill="currentColor"></path>
                </svg>
            </div>
        </button>



    </div>
</div>

@code {
    private string value { get; set; } = "Select Option";
    private NavigationPages SelectedValue;

    string dealNumber { get; set; }
    string dealNumberTo { get; set; }
    string groupBy { get; set; }

    string entryDateFrom { get; set; }
    string entryDateTo { get; set; }
    string contactDateFrom { get; set; }
    string contactDateTo { get; set; }
    string valueDateFrom { get; set; }
    string valueDateTo { get; set; }
    bool branchCode, currency, portfolio, trader, customer,  ps;
    private bool IsLoading = false;
    private IEnumerable<string> branchCodeData, currencyData, portfolioData, traderData;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        var branchCode = await filterService.GetBranchCode();
        var currency = await filterService.GetCurrency();
        var portfolio = await filterService.GetPortfolio();
        var trader = await filterService.GetTrader();

        branchCodeData = branchCode["branchCodeData"];
        currencyData = currency["currencyData"];
        portfolioData = portfolio["portfolioData"];
        traderData = trader["traderData"];

        IsLoading = false;
    }
    private void GenerateReport()
    {
        if (SelectedValue != null)
        {
            switch (SelectedValue.Name.ToString())
            {
                case "ready":
                    navigation.NavigateTo("/" + SelectedValue.Name);
                    break;
                case "discounting":
                    navigation.NavigateTo("/" + SelectedValue.Name);
                    break;
                case "forward":
                    navigation.NavigateTo("/" + SelectedValue.Name);
                    break;
                case "setoff":
                    navigation.NavigateTo("/" + SelectedValue.Name);
                    break;
                case "closeout":
                    navigation.NavigateTo("/" + SelectedValue.Name + "?DealNo=" + dealNumber + "&DealNoTo=" + dealNumberTo + "&ContractDate=" + contactDateFrom + "&ContractDateTo=" + contactDateTo + "&ValueDate=" + valueDateFrom + "&ValueDateTo=" + valueDateTo + "&EntryDate=" + entryDateFrom + "&EntryDateTo=" + entryDateTo + "&Ccy=" + currency + "&Portfolio=" + portfolio + "&Broker=" + trader + "&Customer=" + customer + "&OrderBy=" + ps);
                    break;
                case "outstandingfwd":
                    navigation.NavigateTo("/" + SelectedValue.Name);
                    break;

            }
            navigation.NavigateTo("/" + SelectedValue.Name);
        }
        else
        {
            Snackbar.Add("Please Select Report First...", Severity.Error);
        }
    }

    public class NavigationPages
    {
        public NavigationPages(string name)
        {
            Name = name;
        }

        public readonly string Name;

        public override bool Equals(object o)
        {
            var other = o as NavigationPages;
            return other?.Name == Name;
        }

        public override int GetHashCode() => Name?.GetHashCode() ?? 0;

        public override string ToString() => Name;
    }
}
