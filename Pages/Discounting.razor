@page "/discounting"
@using MudBlazor
@using OSR_APP.Services.Interface
@using Newtonsoft.Json;
@inject IDiscountingService discountingService
<div class="col-sm-12 table-container-styled">
    <style>
        .mud-table-cell-custom-group {
            font-weight: 500;
        }

        .mud-table-cell-custom-group-footer {
            padding-bottom: 50px;
            text-align: left;
        }

        .table-container-styled {
            table-layout: fixed;
            display: table;
        }

        .table-styled {
            text-wrap: nowrap !important;
            word-break: break-word;
        }
    </style>

    <h3>Discounting</h3>
    <hr />
    @if (IsLoading)
    {
        <center>
            <div class="loader"></div>
        </center>
    }
    else
    {
        <MudTable Class="table-styled" Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true"
                  Items="@discountingData"
                  GroupBy="@_groupDefinition"
                  GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
                  GroupFooterClass=""
                  Dense="true">
            <ColGroup>
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />
            </ColGroup>
            <HeaderContent>
                <MudTh>Deal No</MudTh>
                <MudTh>Deal Date</MudTh>
                <MudTh>Value Date</MudTh>
                <MudTh>Remaining Days</MudTh>
                <MudTh>Contact Person</MudTh>
                <MudTh>Branch Code</MudTh>
                <MudTh>Branch Name</MudTh>
                <MudTh>Cover Rate</MudTh>
                <MudTh>Base Rate</MudTh>
                <MudTh>Customer Rate</MudTh>
                <MudTh>Yield</MudTh>
                <MudTh>PS</MudTh>
                <MudTh>Currency</MudTh>
                <MudTh>Portfolio</MudTh>
                <MudTh>Currency Amount</MudTh>
                <MudTh>Discount Amount 1</MudTh>
                <MudTh>Control Number</MudTh>
                <MudTh>SN</MudTh>
                <MudTh>Dealer</MudTh>
                <MudTh>Customer Rate 1</MudTh>
                <MudTh>Discount Amount 2</MudTh>
                <MudTh>Adjustment</MudTh>
                <MudTh>Volume</MudTh>
                <MudTh>Equivalent USD</MudTh>
                <MudTh>Amount</MudTh>
                <MudTh>Equivalent PKR</MudTh>
                <MudTh>Expected Profit</MudTh>
                <MudTh>Spread</MudTh>
            </HeaderContent>
            <GroupHeaderTemplate>
                <MudTh Class="mud-table-cell-custom-group" colspan="28">@($"{context.GroupName}: {context.Key}")</MudTh>
            </GroupHeaderTemplate>
            <RowTemplate>
                <MudTd>@context.DealNo</MudTd>
                <MudTd>@context.DealDate.ToString("dd/MM/yyyy")</MudTd>
                <MudTd>@context.ValueDate?.ToString("dd/MM/yyyy")</MudTd>
                <MudTd>@context.RemDays</MudTd>
                <MudTd>@context.CntPerson</MudTd>
                <MudTd>@context.BrCode</MudTd>
                <MudTd>@context.BrName</MudTd>
                <MudTd>@context.CoverRate</MudTd>
                <MudTd>@context.BaseRate</MudTd>
                <MudTd>@context.CustRate</MudTd>
                <MudTd>@context.Yield</MudTd>
                <MudTd>@context.PS</MudTd>
                <MudTd>@context.Ccy</MudTd>
                <MudTd>@context.Port</MudTd>
                <MudTd>@context.CcyAmt</MudTd>
                <MudTd>@context.DiscAmt1</MudTd>
                <MudTd>@context.Cno</MudTd>
                <MudTd>@context.Sn</MudTd>
                <MudTd>@context.Dealer</MudTd>
                <MudTd>@context.CustRate1</MudTd>
                <MudTd>@context.DiscAmt2</MudTd>
                <MudTd>@context.Adj</MudTd>
                <MudTd>@context.Vol</MudTd>
                <MudTd>@context.EquivalentUSD</MudTd>
                <MudTd>@context.Amount</MudTd>
                <MudTd>@context.EquivalentPKR</MudTd>
                <MudTd>@context.ExProfit</MudTd>
                <MudTd>@context.Spread</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }" />
            </PagerContent>
            <GroupFooterTemplate>
                <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="28">TOTAL(Ex-Profit: @context.Items.Sum((e) => Convert.ToDecimal(e.ExProfit)) | Amount: @context.Items.Sum((e) => Convert.ToDecimal(e.Amount)) | Equvivalent PKR: @context.Items.Sum((e) => Convert.ToDecimal(e.EquivalentPKR)) | Equivalent USD: @context.Items.Sum((e) => Convert.ToDecimal(e.EquivalentUSD)) | Spread: @context.Items.Sum((e) => Convert.ToDecimal(e.Spread)) )</MudTh>
            </GroupFooterTemplate>
        </MudTable>
    }
</div>
@code {
    private IEnumerable<OSR_APP.Models.Discounting> discountingData;
    Dictionary<string, string> dictionary = new Dictionary<string, string>();
    private string searchString = "";
    private bool IsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var response = await discountingService.GetDiscountingData();
        discountingData = response["discountingData"];
        IsLoading = false;
    }
    private TableGroupDefinition<OSR_APP.Models.Discounting> _groupDefinition = new()
        {
            GroupName = "Portfolio",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = true,
            Selector = (e) => e.Port
        };
    private void OnSearch(string text)
    {
        discountingData = discountingData.Where(r =>
          r.DealNo.ToString().Contains(text) ||
          r.BrCode.Contains(text, StringComparison.OrdinalIgnoreCase) ||
          r.BrName.Contains(text, StringComparison.OrdinalIgnoreCase)
        );
    }

    private bool FilterReady(Models.Discounting element) => FilterFunc(element, searchString);

    private bool FilterFunc(Models.Discounting ready, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (ready.DealNo.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (ready.BrName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
